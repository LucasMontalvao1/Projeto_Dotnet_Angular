{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.endpoints.login;\n      this.jwtHelper = new JwtHelperService(); // Instância do JwtHelper para decodificar o token\n    }\n    // Método para realizar o login\n    login(loginRequest) {\n      return this.http.post(this.apiUrl, loginRequest).pipe(catchError(this.handleError) // Captura erros da API\n      );\n    }\n    // Armazena o token no localStorage\n    storeToken(token) {\n      localStorage.setItem('token', token);\n    }\n    // Retorna o token armazenado\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    // Verifica se o token ainda é válido (não expirado)\n    isAuthenticated() {\n      const token = this.getToken();\n      return token ? !this.jwtHelper.isTokenExpired(token) : false;\n    }\n    // Decodifica e retorna os dados do token\n    getDecodedToken() {\n      const token = this.getToken();\n      return token ? this.jwtHelper.decodeToken(token) : null;\n    }\n    // Limpa o token do localStorage, efetua logout\n    logout() {\n      localStorage.removeItem('token');\n    }\n    // Método para tratar erros da API\n    handleError(error) {\n      // Logar ou tratar o erro de acordo com o status\n      let errorMessage = 'Ocorreu um erro desconhecido!';\n      if (error.error instanceof ErrorEvent) {\n        // Erro no lado do cliente\n        errorMessage = `Erro: ${error.error.message}`;\n      } else {\n        // Erro no lado do servidor\n        errorMessage = `Código do Erro: ${error.status}\\nMensagem: ${error.message}`;\n      }\n      return throwError(errorMessage);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}