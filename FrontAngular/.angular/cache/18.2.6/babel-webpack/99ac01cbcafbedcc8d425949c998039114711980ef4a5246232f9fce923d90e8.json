{"ast":null,"code":"import { RxStomp } from '@stomp/rx-stomp';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let LembreteWebSocketService = /*#__PURE__*/(() => {\n  class LembreteWebSocketService {\n    constructor() {\n      this.lembreteSubject = new Subject();\n      this.rxStomp = new RxStomp();\n      this.configureRxStomp();\n      this.initAndConnect();\n    }\n    configureRxStomp() {\n      this.rxStomp.configure({\n        brokerURL: 'ws://localhost:15674/ws',\n        connectHeaders: {\n          login: 'guest',\n          passcode: 'guest'\n        },\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        reconnectDelay: 5000,\n        debug: str => {\n          console.log(new Date(), str);\n        },\n        // Configurações para mensagens binárias\n        forceBinaryWSFrames: true,\n        appendMissingNULLonIncoming: true\n      });\n    }\n    initAndConnect() {\n      console.log('Iniciando conexão WebSocket...');\n      this.rxStomp.activate();\n      this.rxStomp.connected$.subscribe({\n        next: () => {\n          console.log('Conectado ao WebSocket!');\n          this.subscribeToLembretes();\n        },\n        error: error => {\n          console.error('Erro ao conectar ao WebSocket:', error);\n        }\n      });\n    }\n    subscribeToLembretes() {\n      this.rxStomp.watch('/queue/filaLembretes').subscribe({\n        next: message => {\n          console.log('Tipo da mensagem:', typeof message.body);\n          console.log('É binário?', message.isBinaryBody);\n          console.log('Headers:', message.headers);\n          try {\n            let conteudo;\n            if (message.isBinaryBody && message.binaryBody) {\n              // Converte o conteúdo binário para string\n              conteudo = new TextDecoder().decode(message.binaryBody);\n              console.log('Conteúdo decodificado:', conteudo);\n            } else {\n              conteudo = message.body;\n            }\n            // Tenta fazer o parse do JSON\n            if (conteudo) {\n              try {\n                const lembrete = JSON.parse(conteudo);\n                console.log('Lembrete processado:', lembrete);\n                this.lembreteSubject.next(lembrete);\n              } catch (parseError) {\n                // Se não for JSON válido, tenta criar um objeto com o texto recebido\n                console.log('Recebido texto simples:', conteudo);\n                const lembreteSimples = {\n                  descricao: conteudo,\n                  // Adicione outros campos necessários com valores padrão\n                  dataLembrete: new Date(),\n                  usuarioID: 0,\n                  titulo: '',\n                  intervaloEmDias: 0\n                };\n                this.lembreteSubject.next(lembreteSimples);\n              }\n            }\n          } catch (error) {\n            console.error('Erro ao processar mensagem:', error);\n            console.error('Conteúdo da mensagem que causou erro:', message);\n          }\n        },\n        error: error => {\n          console.error('Erro na subscrição:', error);\n        }\n      });\n    }\n    getLembretes() {\n      return this.lembreteSubject.asObservable();\n    }\n    disconnect() {\n      try {\n        this.rxStomp.deactivate();\n        console.log('Desconectado do WebSocket.');\n      } catch (error) {\n        console.error('Erro ao desconectar:', error);\n      }\n    }\n    // Método auxiliar para reconexão\n    reconnect() {\n      console.log('Tentando reconectar...');\n      this.disconnect();\n      setTimeout(() => {\n        this.configureRxStomp();\n        this.initAndConnect();\n      }, 2000);\n    }\n    // Método para verificar status da conexão\n    isConnected() {\n      return this.rxStomp.connected();\n    }\n    static {\n      this.ɵfac = function LembreteWebSocketService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LembreteWebSocketService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: LembreteWebSocketService,\n        factory: LembreteWebSocketService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return LembreteWebSocketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}