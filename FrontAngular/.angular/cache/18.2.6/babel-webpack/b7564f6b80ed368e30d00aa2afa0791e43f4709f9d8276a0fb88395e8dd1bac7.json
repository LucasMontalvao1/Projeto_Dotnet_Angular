{"ast":null,"code":"import { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/progress-spinner\";\nfunction LoginComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Usu\\u00E1rio \\u00E9 obrigat\\u00F3rio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Senha \\u00E9 obrigat\\u00F3ria \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_spinner_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 18);\n  }\n}\nfunction LoginComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Entrar\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, authService, router, snackBar) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.isLoading = false;\n      this.errorMessage = null;\n      this.hidePassword = true;\n      this.year = new Date().getFullYear();\n      this.loginForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(1)]],\n        password: ['', [Validators.required, Validators.minLength(1)]],\n        rememberMe: [false]\n      });\n    }\n    ngOnInit() {}\n    onSubmit() {\n      if (this.loginForm.valid) {\n        this.isLoading = true;\n        this.errorMessage = null;\n        const {\n          username,\n          password,\n          rememberMe\n        } = this.loginForm.value;\n        this.authService.login({\n          username,\n          password\n        }).subscribe({\n          next: user => {\n            if (user && user.token) {\n              if (rememberMe) {\n                localStorage.setItem('rememberMe', 'true');\n              }\n              this.authService.storeToken(user.token);\n              this.router.navigate(['/home']);\n              this.showSuccessMessage('Bem-vindo de volta!');\n            } else {\n              this.handleError('Falha na autenticação');\n            }\n          },\n          error: error => {\n            this.handleError(error);\n          }\n        });\n      } else {\n        this.markFormGroupTouched(this.loginForm);\n      }\n    }\n    showSuccessMessage(message) {\n      this.snackBar.open(message, 'Fechar', {\n        duration: 3000,\n        panelClass: ['success-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'top'\n      });\n    }\n    handleError(error) {\n      const errorMessage = error?.error?.message || 'Ocorreu um erro ao fazer login';\n      this.errorMessage = errorMessage;\n      this.snackBar.open(errorMessage, 'Fechar', {\n        duration: 5000,\n        panelClass: ['error-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'top'\n      });\n      this.isLoading = false;\n    }\n    markFormGroupTouched(formGroup) {\n      Object.values(formGroup.controls).forEach(control => {\n        control.markAsTouched();\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      });\n    }\n    getErrorMessage(controlName) {\n      const control = this.loginForm.get(controlName);\n      if (control?.hasError('required')) {\n        return `${controlName === 'username' ? 'Usuário' : 'Senha'} é obrigatório`;\n      }\n      if (control?.hasError('minlength')) {\n        return `${controlName === 'username' ? 'Usuário' : 'Senha'} deve ter no mínimo ${control.errors?.['minlength'].requiredLength} caracteres`;\n      }\n      return '';\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 38,\n        vars: 8,\n        consts: [[1, \"login-container\"], [1, \"login-card\"], [1, \"login-header\"], [1, \"subtitle\"], [1, \"login-form\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-field\"], [\"appearance\", \"outline\"], [\"matPrefix\", \"\"], [1, \"field-icon\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", \"type\", \"button\", 3, \"click\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"login-button\", 3, \"disabled\"], [\"diameter\", \"20\", 4, \"ngIf\"], [1, \"register-link\"], [\"routerLink\", \"/register\"], [\"diameter\", \"20\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"div\", 2)(3, \"h1\");\n            i0.ɵɵtext(4, \"Bem-vindo\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\", 3);\n            i0.ɵɵtext(6, \"Entre com suas credenciais para continuar\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(7, \"div\", 4)(8, \"form\", 5);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(9, \"div\", 6)(10, \"mat-form-field\", 7)(11, \"mat-label\");\n            i0.ɵɵtext(12, \"Usu\\u00E1rio\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"span\", 8)(14, \"mat-icon\", 9);\n            i0.ɵɵtext(15, \"person_outline\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(16, \"input\", 10);\n            i0.ɵɵtemplate(17, LoginComponent_mat_error_17_Template, 2, 0, \"mat-error\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(18, \"div\", 6)(19, \"mat-form-field\", 7)(20, \"mat-label\");\n            i0.ɵɵtext(21, \"Senha\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(22, \"span\", 8)(23, \"mat-icon\", 9);\n            i0.ɵɵtext(24, \"lock_outline\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(25, \"input\", 12);\n            i0.ɵɵelementStart(26, \"button\", 13);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_26_listener() {\n              return ctx.hidePassword = !ctx.hidePassword;\n            });\n            i0.ɵɵelementStart(27, \"mat-icon\");\n            i0.ɵɵtext(28);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(29, LoginComponent_mat_error_29_Template, 2, 0, \"mat-error\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(30, \"button\", 14);\n            i0.ɵɵtemplate(31, LoginComponent_mat_spinner_31_Template, 1, 0, \"mat-spinner\", 15)(32, LoginComponent_span_32_Template, 2, 0, \"span\", 11);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(33, \"div\", 16)(34, \"span\");\n            i0.ɵɵtext(35, \"N\\u00E3o tem uma conta ? \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(36, \"a\", 17);\n            i0.ɵɵtext(37, \"Cadastre-se\");\n            i0.ɵɵelementEnd()()()()()();\n          }\n          if (rf & 2) {\n            let tmp_1_0;\n            let tmp_4_0;\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.loginForm.get(\"username\")) == null ? null : tmp_1_0.hasError(\"required\"));\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"type\", ctx.hidePassword ? \"password\" : \"text\");\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate(ctx.hidePassword ? \"visibility_off\" : \"visibility\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_4_0.hasError(\"required\"));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n          }\n        },\n        dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink, i6.MatCard, i7.MatFormField, i7.MatLabel, i7.MatError, i7.MatPrefix, i7.MatSuffix, i8.MatInput, i9.MatButton, i9.MatIconButton, i10.MatIcon, i11.MatProgressSpinner],\n        styles: [\".login-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;min-height:100vh;background-color:#f5f5f5;padding:1rem}.login-card[_ngcontent-%COMP%]{width:100%;max-width:400px;padding:2rem;box-shadow:0 4px 20px #00000014!important;border-radius:12px!important}.login-header[_ngcontent-%COMP%]{text-align:center;margin-bottom:2rem}.login-header[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:1.75rem;font-weight:600;color:#333;margin:0;margin-bottom:.5rem}.subtitle[_ngcontent-%COMP%]{color:#666;font-size:.9rem;margin:0}.form-field[_ngcontent-%COMP%]{margin-bottom:1rem}mat-form-field[_ngcontent-%COMP%]{width:100%}.field-icon[_ngcontent-%COMP%]{margin-right:8px;color:#666}.form-options[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:1.5rem;font-size:.9rem}.login-button[_ngcontent-%COMP%]{width:100%;padding:.75rem;font-size:1rem;border-radius:8px;position:relative;min-height:48px}.login-button[_ngcontent-%COMP%]   mat-spinner[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.register-link[_ngcontent-%COMP%]{text-align:center;margin-top:1.5rem;font-size:.9rem;color:#666}.register-button[_ngcontent-%COMP%]{color:#1976d2;text-decoration:none;font-weight:500;margin-left:.5rem;transition:color .2s}.register-button[_ngcontent-%COMP%]:hover{color:#1565c0}@media (max-width: 480px){.login-card[_ngcontent-%COMP%]{padding:1.5rem}.form-options[_ngcontent-%COMP%]{flex-direction:column;align-items:flex-start;gap:1rem}}.login-card[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_fadeIn .3s ease-out}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}\"]\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}