{"ast":null,"code":"import { Client } from '../client.js';\nimport { HeartbeatInfo } from './heartbeat-info.js';\n/**\r\n * Available for backward compatibility, please shift to using {@link Client}.\r\n *\r\n * **Deprecated**\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * To upgrade, please follow the [Upgrade Guide](https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html)\r\n */\nexport class CompatClient extends Client {\n  /**\r\n   * Available for backward compatibility, please shift to using {@link Client}\r\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * @internal\r\n   */\n  constructor(webSocketFactory) {\n    super();\n    /**\r\n     * It is no op now. No longer needed. Large packets work out of the box.\r\n     */\n    this.maxWebSocketFrameSize = 16 * 1024;\n    this._heartbeatInfo = new HeartbeatInfo(this);\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message) => {\n      console.log(...message);\n    };\n  }\n  _parseConnect(...args) {\n    let closeEventCallback;\n    let connectCallback;\n    let errorCallback;\n    let headers = {};\n    if (args.length < 2) {\n      throw new Error('Connect requires at least 2 arguments');\n    }\n    if (typeof args[1] === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n          break;\n        default:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n  /**\r\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\r\n   * version with headers to pass your broker specific options.\r\n   *\r\n   * overloads:\r\n   * - connect(headers, connectCallback)\r\n   * - connect(headers, connectCallback, errorCallback)\r\n   * - connect(login, passcode, connectCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\r\n   *\r\n   * params:\r\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\r\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\r\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\r\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\r\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\n  connect(...args) {\n    const out = this._parseConnect(...args);\n    if (out[0]) {\n      this.connectHeaders = out[0];\n    }\n    if (out[1]) {\n      this.onConnect = out[1];\n    }\n    if (out[2]) {\n      this.onStompError = out[2];\n    }\n    if (out[3]) {\n      this.onWebSocketClose = out[3];\n    }\n    super.activate();\n  }\n  /**\r\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * See:\r\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\r\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\n  disconnect(disconnectCallback, headers = {}) {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n    super.deactivate();\n  }\n  /**\r\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\r\n   *\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\r\n   * However, there may be special purpose headers corresponding to your STOMP broker.\r\n   *\r\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\r\n   *\r\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\r\n   *\r\n   * ```javascript\r\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\r\n   *\r\n   *        // If you want to send a message with a body, you must also pass the headers argument.\r\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\r\n   * ```\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\n  send(destination, headers = {}, body = '') {\n    headers = Object.assign({}, headers);\n    const skipContentLengthHeader = headers['content-length'] === false;\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination,\n      headers: headers,\n      body,\n      skipContentLengthHeader\n    });\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set reconnect_delay(value) {\n    this.reconnectDelay = value;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get ws() {\n    return this.webSocket;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get onreceive() {\n    return this.onUnhandledMessage;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set onreceive(value) {\n    this.onUnhandledMessage = value;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get onreceipt() {\n    return this.onUnhandledReceipt;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set onreceipt(value) {\n    this.onUnhandledReceipt = value;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\r\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\r\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set heartbeat(value) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n//# sourceMappingURL=compat-client.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}