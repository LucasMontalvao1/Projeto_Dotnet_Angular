{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n// menu.component.ts\nimport { Component } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nlet MenuComponent = class MenuComponent {\n  constructor(authService, router, snackBar) {\n    this.authService = authService;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.isScrolled = false;\n    this.userName = 'UsuÃ¡rio';\n    // Detecta scroll para adicionar sombra no menu\n    window.addEventListener('scroll', () => {\n      this.isScrolled = window.scrollY > 10;\n    });\n  }\n  logout() {\n    this.snackBar.open('Logout realizado com sucesso!', 'Fechar', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    });\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n};\nMenuComponent = __decorate([Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n}), __metadata(\"design:paramtypes\", [AuthService, Router, MatSnackBar])], MenuComponent);\nexport { MenuComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}