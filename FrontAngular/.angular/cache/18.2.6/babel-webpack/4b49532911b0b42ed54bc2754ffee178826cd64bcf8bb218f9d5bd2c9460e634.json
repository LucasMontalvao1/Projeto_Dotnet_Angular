{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '@/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LembreteService = /*#__PURE__*/(() => {\n  class LembreteService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.endpoints.lembretes;\n    }\n    getHeaders() {\n      const token = sessionStorage.getItem('token');\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    }\n    getLembretes() {\n      return this.http.get(`${this.apiUrl}/todos`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getLembreteById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    }\n    createLembrete(lembrete) {\n      return this.http.post(this.apiUrl, lembrete, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    editLembrete(lembrete) {\n      return this.http.put(`${this.apiUrl}/${lembrete.id}`, lembrete, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteLembrete(lembreteId) {\n      return this.http.delete(`${this.apiUrl}/${lembreteId}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error('Ocorreu um erro:', error);\n      return throwError(() => new Error('Erro ao realizar a operação.'));\n    }\n    static {\n      this.ɵfac = function LembreteService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LembreteService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: LembreteService,\n        factory: LembreteService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return LembreteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}