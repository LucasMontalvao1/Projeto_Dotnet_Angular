{"ast":null,"code":"import { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\nfunction LoginComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Usu\\u00E1rio \\u00E9 obrigat\\u00F3rio. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Senha \\u00E9 obrigat\\u00F3ria. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, authService, router, snackBar) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.isLoading = false;\n      this.errorMessage = null;\n      this.hidePassword = true;\n      this.year = new Date().getFullYear();\n      this.loginForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(3)]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        rememberMe: [false]\n      });\n    }\n    onSubmit() {\n      if (this.loginForm.valid) {\n        this.isLoading = true;\n        this.errorMessage = null;\n        const {\n          username,\n          password,\n          rememberMe\n        } = this.loginForm.value;\n        this.authService.login({\n          username,\n          password\n        }).subscribe({\n          next: user => {\n            if (user && user.token) {\n              if (rememberMe) {\n                // Implementar lógica de \"lembrar-me\" se necessário\n                localStorage.setItem('rememberMe', 'true');\n              }\n              this.authService.storeToken(user.token);\n              this.router.navigate(['/home']);\n              this.showSuccessMessage('Bem-vindo de volta!');\n            } else {\n              this.handleError('Falha na autenticação');\n            }\n          },\n          error: error => {\n            this.handleError(error);\n          }\n        });\n      } else {\n        this.markFormGroupTouched(this.loginForm);\n      }\n    }\n    showSuccessMessage(message) {\n      this.snackBar.open(message, 'Fechar', {\n        duration: 3000,\n        panelClass: ['success-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'top'\n      });\n    }\n    handleError(error) {\n      const errorMessage = error?.error?.message || 'Ocorreu um erro ao fazer login';\n      this.errorMessage = errorMessage;\n      this.snackBar.open(errorMessage, 'Fechar', {\n        duration: 5000,\n        panelClass: ['error-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'top'\n      });\n      this.isLoading = false;\n    }\n    markFormGroupTouched(formGroup) {\n      Object.values(formGroup.controls).forEach(control => {\n        control.markAsTouched();\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      });\n    }\n    getErrorMessage(controlName) {\n      const control = this.loginForm.get(controlName);\n      if (control?.hasError('required')) {\n        return `${controlName === 'username' ? 'Usuário' : 'Senha'} é obrigatório`;\n      }\n      if (control?.hasError('minlength')) {\n        return `${controlName === 'username' ? 'Usuário' : 'Senha'} deve ter no mínimo ${control.errors?.['minlength'].requiredLength} caracteres`;\n      }\n      return '';\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 20,\n        vars: 6,\n        consts: [[1, \"login-container\"], [1, \"login-card\"], [1, \"login-title\"], [3, \"ngSubmit\", \"formGroup\"], [\"appearance\", \"outline\", 1, \"login-input\"], [\"matInput\", \"\", \"formControlName\", \"username\", \"required\", \"\", \"autocomplete\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\", \"autocomplete\", \"current-password\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [1, \"error-message\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\", 2);\n            i0.ɵɵtext(4, \"Login\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(5, \"mat-card-content\")(6, \"form\", 3);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(7, \"mat-form-field\", 4)(8, \"mat-label\");\n            i0.ɵɵtext(9, \"Usu\\u00E1rio\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(10, \"input\", 5);\n            i0.ɵɵtemplate(11, LoginComponent_mat_error_11_Template, 2, 0, \"mat-error\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"mat-form-field\", 4)(13, \"mat-label\");\n            i0.ɵɵtext(14, \"Senha\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(15, \"input\", 7);\n            i0.ɵɵtemplate(16, LoginComponent_mat_error_16_Template, 2, 0, \"mat-error\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 2, 1, \"div\", 8);\n            i0.ɵɵelementStart(18, \"button\", 9);\n            i0.ɵɵtext(19);\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            let tmp_1_0;\n            let tmp_2_0;\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.loginForm.get(\"username\")) == null ? null : tmp_1_0.hasError(\"required\"));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_2_0.hasError(\"required\"));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Entrando...\" : \"Entrar\", \" \");\n          }\n        },\n        dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i6.MatCard, i6.MatCardContent, i6.MatCardHeader, i6.MatCardTitle, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput, i9.MatButton],\n        styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  {// webpackBootstrap \\\"use strict\\\";})()[_ngcontent-%COMP%] ;{%BLOCK%}\"]\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}