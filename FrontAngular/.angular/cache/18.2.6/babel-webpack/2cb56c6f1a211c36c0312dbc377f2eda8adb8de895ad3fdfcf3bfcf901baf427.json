{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '@/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TransacaoService = /*#__PURE__*/(() => {\n  class TransacaoService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/api/v1/transacao`;\n    }\n    getHeaders() {\n      const token = sessionStorage.getItem('token');\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    }\n    getTransacoes() {\n      return this.http.get(this.apiUrl, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getTransacaoById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    createTransacao(transacao) {\n      return this.http.post(this.apiUrl, transacao, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateTransacao(transacao) {\n      return this.http.put(`${this.apiUrl}/${transacao.transacaoID}`, transacao, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteTransacao(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error('Erro na operação:', error);\n      let errorMessage = 'Erro ao realizar a operação.';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Erro: ${error.error.message}`;\n      } else {\n        switch (error.status) {\n          case 400:\n            errorMessage = error.error || 'Dados inválidos.';\n            break;\n          case 401:\n            errorMessage = 'Não autorizado. Por favor, faça login novamente.';\n            break;\n          case 404:\n            errorMessage = 'Transação não encontrada.';\n            break;\n          case 500:\n            errorMessage = 'Erro interno do servidor.';\n            break;\n          default:\n            errorMessage = 'Ocorreu um erro inesperado.';\n        }\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function TransacaoService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || TransacaoService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TransacaoService,\n        factory: TransacaoService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TransacaoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}