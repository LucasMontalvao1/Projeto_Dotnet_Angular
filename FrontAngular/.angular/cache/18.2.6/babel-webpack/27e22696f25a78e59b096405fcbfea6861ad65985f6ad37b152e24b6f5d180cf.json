{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { TransacaoService } from '@/app/services/transacao.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { FormGroup, FormControl } from '@angular/forms';\nlet DashboardComponent = class DashboardComponent {\n  // Método para recarregar dados\n  reloadData() {\n    this.loadChartData();\n  }\n  // Métodos para cálculos de totais\n  getTotalEntradas() {\n    return this.transacoes.filter(t => t.tipo === 'Entrada').reduce((total, t) => total + t.valor, 0);\n  }\n  getTotalSaidas() {\n    return this.transacoes.filter(t => t.tipo === 'Saída').reduce((total, t) => total + t.valor, 0);\n  }\n  getSaldo() {\n    return this.getTotalEntradas() - this.getTotalSaidas();\n  }\n  getMediaMensal() {\n    const meses = new Set(this.transacoes.map(t => {\n      const data = new Date(t.data);\n      return `${data.getMonth()}-${data.getFullYear()}`;\n    })).size;\n    return meses > 0 ? this.getSaldo() / meses : 0;\n  }\n  // Método para obter mês atual\n  getMesAtual() {\n    const meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    return meses[new Date().getMonth()];\n  }\n  constructor(transacaoService) {\n    this.transacaoService = transacaoService;\n    this.transacoes = [];\n    this.isLoading = false;\n    this.error = null;\n    this.displayedColumns = ['data', 'descricao', 'tipo', 'valor'];\n    // Filtros de data\n    this.filterForm = new FormGroup({\n      dataInicio: new FormControl(),\n      dataFim: new FormControl()\n    });\n    // Configuração do gráfico de barras\n    this.barChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Entradas',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgb(75, 192, 192)',\n        borderWidth: 1\n      }, {\n        data: [],\n        label: 'Saídas',\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n        borderColor: 'rgb(255, 99, 132)',\n        borderWidth: 1\n      }]\n    };\n    // Configuração do gráfico de linha (evolução do saldo)\n    this.lineChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Saldo',\n        fill: true,\n        tension: 0.4,\n        backgroundColor: 'rgba(66, 135, 245, 0.2)',\n        borderColor: 'rgb(66, 135, 245)',\n        borderWidth: 2\n      }]\n    };\n    // Configuração do gráfico de pizza (distribuição de despesas)\n    this.pieChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']\n      }]\n    };\n    // Opções comuns dos gráficos\n    this.chartOptions = {\n      responsive: true,\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            callback: value => `R$ ${value.toFixed(2)}`\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        tooltip: {\n          callbacks: {\n            label: context => {\n              let label = context.dataset.label || '';\n              if (label) label += ': ';\n              label += `R$ ${context.raw.toFixed(2)}`;\n              return label;\n            }\n          }\n        }\n      }\n    };\n    this.dataSource = new MatTableDataSource();\n  }\n  ngOnInit() {\n    this.loadChartData();\n  }\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sortingDataAccessor = (item, property) => {\n      switch (property) {\n        case 'data':\n          return new Date(item.data);\n        default:\n          return item[property];\n      }\n    };\n  }\n  aplicarFiltro() {\n    const dataInicio = this.filterForm.get('dataInicio')?.value;\n    const dataFim = this.filterForm.get('dataFim')?.value;\n    if (dataInicio && dataFim) {\n      this.loadChartData(dataInicio, dataFim);\n    }\n  }\n  loadChartData(dataInicio, dataFim) {\n    this.isLoading = true;\n    this.error = null;\n    this.transacaoService.getTransacoes().subscribe({\n      next: transacoes => {\n        this.transacoes = transacoes;\n        if (dataInicio && dataFim) {\n          this.transacoes = this.filtrarTransacoesPorPeriodo(transacoes, dataInicio, dataFim);\n        }\n        this.updateAllCharts();\n        this.dataSource.data = this.transacoes;\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Erro ao carregar transações:', error);\n        this.error = 'Erro ao carregar os dados. Tente novamente mais tarde.';\n        this.isLoading = false;\n      }\n    });\n  }\n  filtrarTransacoesPorPeriodo(transacoes, inicio, fim) {\n    return transacoes.filter(t => {\n      const data = new Date(t.data);\n      return data >= inicio && data <= fim;\n    });\n  }\n  updateAllCharts() {\n    this.updateBarChart();\n    this.updateLineChart();\n    this.updatePieChart();\n  }\n  updateBarChart() {\n    const transacoesPorMes = this.agruparTransacoesPorMes();\n    const meses = Array.from(transacoesPorMes.keys()).sort();\n    this.barChartData.labels = meses;\n    this.barChartData.datasets[0].data = meses.map(mes => transacoesPorMes.get(mes)?.entradas || 0);\n    this.barChartData.datasets[1].data = meses.map(mes => transacoesPorMes.get(mes)?.saidas || 0);\n  }\n  agruparTransacoesPorMes() {\n    const mesesMap = new Map();\n    const meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    this.transacoes.forEach(transacao => {\n      const data = new Date(transacao.data);\n      const mesNome = meses[data.getMonth()];\n      if (!mesesMap.has(mesNome)) {\n        mesesMap.set(mesNome, {\n          entradas: 0,\n          saidas: 0\n        });\n      }\n      const valores = mesesMap.get(mesNome);\n      if (transacao.tipo === 'Entrada') {\n        valores.entradas += transacao.valor;\n      } else {\n        valores.saidas += transacao.valor;\n      }\n    });\n    return mesesMap;\n  }\n  updateLineChart() {\n    // Ordenar transações por data\n    const transacoesOrdenadas = [...this.transacoes].sort((a, b) => new Date(a.data).getTime() - new Date(b.data).getTime());\n    let saldoAcumulado = 0;\n    const dados = transacoesOrdenadas.map(t => {\n      saldoAcumulado += t.tipo === 'Entrada' ? t.valor : -t.valor;\n      return saldoAcumulado;\n    });\n    this.lineChartData.labels = transacoesOrdenadas.map(t => new Date(t.data).toLocaleDateString('pt-BR'));\n    this.lineChartData.datasets[0].data = dados;\n  }\n  agruparDespesasPorCategoria() {\n    const categoriasMap = new Map();\n    this.transacoes.filter(t => t.tipo === 'Saída').forEach(t => {\n      // Usar o ID da categoria em vez do nome\n      const categoriaId = t.categoriaID.toString();\n      const valorAtual = categoriasMap.get(categoriaId) || 0;\n      categoriasMap.set(categoriaId, valorAtual + t.valor);\n    });\n    return categoriasMap;\n  }\n  updatePieChart() {\n    const despesasPorCategoria = this.agruparDespesasPorCategoria();\n    this.pieChartData.labels = Array.from(despesasPorCategoria.keys());\n    this.pieChartData.datasets[0].data = Array.from(despesasPorCategoria.values());\n  }\n  // ... Seus métodos existentes (getTotalEntradas, getTotalSaidas, etc.) ...\n  aplicarFiltroTabela(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n};\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], DashboardComponent.prototype, \"sort\", void 0);\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], DashboardComponent.prototype, \"paginator\", void 0);\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n}), __metadata(\"design:paramtypes\", [TransacaoService])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}