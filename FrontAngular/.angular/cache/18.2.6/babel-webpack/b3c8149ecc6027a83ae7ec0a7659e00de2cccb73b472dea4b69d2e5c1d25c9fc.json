{"ast":null,"code":"import { TransacaoService } from '@/app/services/transacao.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@/app/services/transacao.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"ng2-charts\";\nconst _c0 = (a0, a1) => ({\n  \"positive\": a0,\n  \"negative\": a1\n});\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(transacaoService) {\n      this.transacaoService = transacaoService;\n      this.transacoes = [];\n      this.isLoading = false;\n      this.error = null;\n      // Configuração do gráfico\n      this.barChartData = {\n        labels: [],\n        datasets: [{\n          data: [],\n          label: 'Entradas',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgb(75, 192, 192)',\n          borderWidth: 1\n        }, {\n          data: [],\n          label: 'Saídas',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgb(255, 99, 132)',\n          borderWidth: 1\n        }]\n      };\n      this.barChartOptions = {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              callback: function (value) {\n                return 'R$ ' + value.toFixed(2);\n              }\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                label += 'R$ ' + context.raw.toFixed(2);\n                return label;\n              }\n            }\n          }\n        }\n      };\n      this.barChartLegend = true;\n      this.barChartType = 'bar';\n    }\n    ngOnInit() {\n      this.loadChartData();\n    }\n    loadChartData() {\n      this.isLoading = true;\n      this.error = null;\n      this.transacaoService.getTransacoes().subscribe({\n        next: transacoes => {\n          this.transacoes = transacoes;\n          this.updateChartData();\n          this.isLoading = false;\n        },\n        error: error => {\n          console.error('Erro ao carregar transações:', error);\n          this.error = 'Erro ao carregar os dados. Tente novamente mais tarde.';\n          this.isLoading = false;\n        }\n      });\n    }\n    updateChartData() {\n      // Agrupar transações por mês\n      const transacoesPorMes = this.agruparTransacoesPorMes();\n      // Preparar dados para o gráfico\n      const meses = Array.from(transacoesPorMes.keys()).sort();\n      const entradas = meses.map(mes => transacoesPorMes.get(mes)?.entradas || 0);\n      const saidas = meses.map(mes => transacoesPorMes.get(mes)?.saidas || 0);\n      // Atualizar dados do gráfico\n      this.barChartData.labels = meses;\n      this.barChartData.datasets[0].data = entradas;\n      this.barChartData.datasets[1].data = saidas;\n    }\n    agruparTransacoesPorMes() {\n      const mesesMap = new Map();\n      const meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n      this.transacoes.forEach(transacao => {\n        const data = new Date(transacao.data);\n        const mesNome = meses[data.getMonth()];\n        if (!mesesMap.has(mesNome)) {\n          mesesMap.set(mesNome, {\n            entradas: 0,\n            saidas: 0\n          });\n        }\n        const valores = mesesMap.get(mesNome);\n        if (transacao.tipo === 'Entrada') {\n          valores.entradas += transacao.valor;\n        } else {\n          valores.saidas += transacao.valor;\n        }\n      });\n      return mesesMap;\n    }\n    // Métodos para cálculos de totais\n    getTotalEntradas() {\n      return this.transacoes.filter(t => t.tipo === 'Entrada').reduce((total, t) => total + t.valor, 0);\n    }\n    getTotalSaidas() {\n      return this.transacoes.filter(t => t.tipo === 'Saída').reduce((total, t) => total + t.valor, 0);\n    }\n    getSaldo() {\n      return this.getTotalEntradas() - this.getTotalSaidas();\n    }\n    getMediaMensal() {\n      const meses = new Set(this.transacoes.map(t => {\n        const data = new Date(t.data);\n        return `${data.getMonth()}-${data.getFullYear()}`;\n      })).size;\n      return meses > 0 ? this.getSaldo() / meses : 0;\n    }\n    // Método para recarregar os dados\n    reloadData() {\n      this.loadChartData();\n    }\n    // Formatação de moeda\n    formatCurrency(value) {\n      return new Intl.NumberFormat('pt-BR', {\n        style: 'currency',\n        currency: 'BRL'\n      }).format(value);\n    }\n    // Método para verificar se há dados\n    hasData() {\n      return this.transacoes.length > 0;\n    }\n    // Método para obter mês atual\n    getMesAtual() {\n      const meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n      return meses[new Date().getMonth()];\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DashboardComponent)(i0.ɵɵdirectiveInject(i1.TransacaoService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        decls: 55,\n        vars: 24,\n        consts: [[1, \"dashboard-container\"], [1, \"dashboard-header\"], [1, \"subtitle\"], [1, \"summary-cards\"], [1, \"summary-card\"], [1, \"card-content\"], [1, \"card-info\"], [1, \"card-label\"], [1, \"card-value\", \"positive\"], [1, \"card-icon\", \"positive\"], [1, \"card-value\", \"negative\"], [1, \"card-icon\", \"negative\"], [1, \"card-value\", 3, \"ngClass\"], [1, \"card-icon\"], [1, \"card-value\"], [1, \"charts-container\"], [1, \"chart-card\"], [1, \"chart-wrapper\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"legend\", \"type\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n            i0.ɵɵtext(3, \"Dashboard Financeiro\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"p\", 2);\n            i0.ɵɵtext(5, \"Vis\\u00E3o geral das suas finan\\u00E7as\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(6, \"div\", 3)(7, \"mat-card\", 4)(8, \"div\", 5)(9, \"div\", 6)(10, \"span\", 7);\n            i0.ɵɵtext(11, \"Total Entradas\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"span\", 8);\n            i0.ɵɵtext(13);\n            i0.ɵɵpipe(14, \"currency\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(15, \"mat-icon\", 9);\n            i0.ɵɵtext(16, \"trending_up\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(17, \"mat-card\", 4)(18, \"div\", 5)(19, \"div\", 6)(20, \"span\", 7);\n            i0.ɵɵtext(21, \"Total Sa\\u00EDdas\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(22, \"span\", 10);\n            i0.ɵɵtext(23);\n            i0.ɵɵpipe(24, \"currency\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(25, \"mat-icon\", 11);\n            i0.ɵɵtext(26, \"trending_down\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(27, \"mat-card\", 4)(28, \"div\", 5)(29, \"div\", 6)(30, \"span\", 7);\n            i0.ɵɵtext(31, \"Saldo\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"span\", 12);\n            i0.ɵɵtext(33);\n            i0.ɵɵpipe(34, \"currency\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(35, \"mat-icon\", 13);\n            i0.ɵɵtext(36, \"account_balance_wallet\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(37, \"mat-card\", 4)(38, \"div\", 5)(39, \"div\", 6)(40, \"span\", 7);\n            i0.ɵɵtext(41, \"M\\u00E9dia Mensal\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(42, \"span\", 14);\n            i0.ɵɵtext(43);\n            i0.ɵɵpipe(44, \"currency\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(45, \"mat-icon\", 13);\n            i0.ɵɵtext(46, \"show_chart\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(47, \"div\", 15)(48, \"mat-card\", 16)(49, \"mat-card-header\")(50, \"mat-card-title\");\n            i0.ɵɵtext(51, \"Receitas vs Despesas por M\\u00EAs\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(52, \"mat-card-content\")(53, \"div\", 17);\n            i0.ɵɵelement(54, \"canvas\", 18);\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(13);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(14, 9, ctx.getTotalEntradas(), \"BRL\"), \" \");\n            i0.ɵɵadvance(10);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(24, 12, ctx.getTotalSaidas(), \"BRL\"), \" \");\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(21, _c0, ctx.getSaldo() > 0, ctx.getSaldo() < 0));\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(34, 15, ctx.getSaldo(), \"BRL\"), \" \");\n            i0.ɵɵadvance(10);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(44, 18, ctx.getMediaMensal(), \"BRL\"), \" \");\n            i0.ɵɵadvance(11);\n            i0.ɵɵproperty(\"data\", ctx.barChartData)(\"options\", ctx.barChartOptions)(\"legend\", ctx.barChartLegend)(\"type\", ctx.barChartType);\n          }\n        },\n        dependencies: [i2.NgClass, i3.MatCard, i3.MatCardContent, i3.MatCardHeader, i3.MatCardTitle, i4.MatIcon, i5.BaseChartDirective, i2.CurrencyPipe],\n        styles: [\".dashboard-container[_ngcontent-%COMP%]{padding:24px;background-color:#f5f5f5;min-height:100vh}.dashboard-header[_ngcontent-%COMP%]{margin-bottom:32px}.dashboard-header[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:28px;color:#1a237e;margin:0;font-weight:500}.dashboard-header[_ngcontent-%COMP%]   .subtitle[_ngcontent-%COMP%]{color:#666;margin-top:8px}.summary-cards[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:24px;margin-bottom:32px}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:flex-start;padding:16px}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-info[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:8px}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-info[_ngcontent-%COMP%]   .card-label[_ngcontent-%COMP%]{font-size:14px;color:#666}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-info[_ngcontent-%COMP%]   .card-value[_ngcontent-%COMP%]{font-size:24px;font-weight:500}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-info[_ngcontent-%COMP%]   .card-value.positive[_ngcontent-%COMP%]{color:#4caf50}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-info[_ngcontent-%COMP%]   .card-value.negative[_ngcontent-%COMP%]{color:#f44336}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-icon[_ngcontent-%COMP%]{font-size:24px;width:24px;height:24px}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-icon.positive[_ngcontent-%COMP%]{color:#4caf50}.summary-card[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]   .card-icon.negative[_ngcontent-%COMP%]{color:#f44336}.charts-container[_ngcontent-%COMP%]{margin-top:32px}.charts-container[_ngcontent-%COMP%]   .chart-card[_ngcontent-%COMP%]{padding:16px}.charts-container[_ngcontent-%COMP%]   .chart-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]{margin-bottom:16px}.charts-container[_ngcontent-%COMP%]   .chart-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]   mat-card-title[_ngcontent-%COMP%]{font-size:20px;color:#1a237e}.charts-container[_ngcontent-%COMP%]   .chart-card[_ngcontent-%COMP%]   .chart-wrapper[_ngcontent-%COMP%]{height:400px;position:relative;margin:0 auto}//[_ngcontent-%COMP%]   Responsividade[_ngcontent-%COMP%]   @media[_ngcontent-%COMP%]   (max-width[_ngcontent-%COMP%]:   768px)[_ngcontent-%COMP%]{.dashboard-container{padding:16px}.summary-cards{grid-template-columns:1fr}.chart-wrapper{height:300px}}//[_ngcontent-%COMP%]   Anima\\\\e7\\\\f5 es[_ngcontent-%COMP%]   .summary-card[_ngcontent-%COMP%]{transition:transform .2s ease-in-out;&:hover{transform:translateY(-5px);box-shadow:0 4px 8px #0000001a}}//[_ngcontent-%COMP%]   Temas[_ngcontent-%COMP%]   claros/escuros[_ngcontent-%COMP%]   @media[_ngcontent-%COMP%]   (prefers-color-scheme[_ngcontent-%COMP%]:   dark)[_ngcontent-%COMP%]{.dashboard-container{background-color:#1e1e1e}.dashboard-header h1{color:#fff}.card-label{color:#ccc!important}mat-card{background-color:#2d2d2d;color:#fff}mat-card-title{color:#fff!important}}\"]\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}