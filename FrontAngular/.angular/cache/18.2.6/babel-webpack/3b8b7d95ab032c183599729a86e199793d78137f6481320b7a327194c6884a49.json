{"ast":null,"code":"import _asyncToGenerator from \"C:/dev/Projeto_Dotnet_Angular/FrontAngular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class Client {\n  /**\r\n   * Create an instance.\r\n   */\n  constructor(conf = {}) {\n    /**\r\n     * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n     *\r\n     * Example:\r\n     * ```javascript\r\n     *        // Try only versions 1.1 and 1.0\r\n     *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n     * ```\r\n     */\n    this.stompVersions = Versions.default;\n    /**\r\n     * Will retry if Stomp connection is not established in specified milliseconds.\r\n     * Default 0, which switches off automatic reconnection.\r\n     */\n    this.connectionTimeout = 0;\n    /**\r\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n     */\n    this.reconnectDelay = 5000;\n    /**\r\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n    this.heartbeatIncoming = 10000;\n    /**\r\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\r\n     * This switches on a non-standard behavior while sending WebSocket packets.\r\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n     * Only Java Spring brokers seem to support this mode.\r\n     *\r\n     * WebSockets, by itself, split large (text) packets,\r\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n     * Setting it for such a broker will cause large messages to fail.\r\n     *\r\n     * `false` by default.\r\n     *\r\n     * Binary frames are never split.\r\n     */\n    this.splitLargeFrames = false;\n    /**\r\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\r\n     * Usually the\r\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n     * is automatically decided by type of the payload.\r\n     * Default is `false`, which should work with all compliant brokers.\r\n     *\r\n     * Set this flag to force binary frames.\r\n     */\n    this.forceBinaryWSFrames = false;\n    /**\r\n     * A bug in ReactNative chops a string on occurrence of a NULL.\r\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n     * This makes incoming WebSocket messages invalid STOMP packets.\r\n     * Setting this flag attempts to reverse the damage by appending a NULL.\r\n     * If the broker splits a large message into multiple WebSocket messages,\r\n     * this flag will cause data loss and abnormal termination of connection.\r\n     *\r\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\r\n     * Browsers do not immediately close WebSockets when `.close` is issued.\r\n     * This may cause reconnection to take a significantly long time in case\r\n     *  of some types of failures.\r\n     * In case of incoming heartbeat failure, this experimental flag instructs\r\n     * the library to discard the socket immediately\r\n     * (even before it is actually closed).\r\n     */\n    this.discardWebsocketOnCommFailure = false;\n    /**\r\n     * Activation state.\r\n     *\r\n     * It will usually be ACTIVE or INACTIVE.\r\n     * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n     */\n    this.state = ActivationState.INACTIVE;\n    // No op callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\r\n   * Underlying WebSocket instance, READONLY.\r\n   */\n  get webSocket() {\n    return this._stompHandler?._webSocket;\n  }\n  /**\r\n   * Disconnection headers.\r\n   */\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\r\n   * `true` if there is an active connection to STOMP Broker\r\n   */\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\r\n   * version of STOMP protocol negotiated with the server, READONLY\r\n   */\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\r\n   * if the client is active (connected or going to reconnect)\r\n   */\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\r\n   * Update configuration.\r\n   */\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  /**\r\n   * Initiate the connection with the broker.\r\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n   * it will keep trying to reconnect.\r\n   *\r\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n   */\n  activate() {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n      this._changeState(ActivationState.ACTIVE);\n      this._connect();\n    };\n    // if it is deactivating, wait for it to complete before activating.\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n  _connect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.beforeConnect();\n      if (_this._stompHandler) {\n        _this.debug('There is already a stompHandler, skipping the call to connect');\n        return;\n      }\n      if (!_this.active) {\n        _this.debug('Client has been marked inactive, will not attempt to connect');\n        return;\n      }\n      // setup connection watcher\n      if (_this.connectionTimeout > 0) {\n        // clear first\n        if (_this._connectionWatcher) {\n          clearTimeout(_this._connectionWatcher);\n        }\n        _this._connectionWatcher = setTimeout(() => {\n          if (_this.connected) {\n            return;\n          }\n          // Connection not established, close the underlying socket\n          // a reconnection will be attempted\n          _this.debug(`Connection not established in ${_this.connectionTimeout}ms, closing socket`);\n          _this.forceDisconnect();\n        }, _this.connectionTimeout);\n      }\n      _this.debug('Opening Web Socket...');\n      // Get the actual WebSocket (or a similar object)\n      const webSocket = _this._createWebSocket();\n      _this._stompHandler = new StompHandler(_this, webSocket, {\n        debug: _this.debug,\n        stompVersions: _this.stompVersions,\n        connectHeaders: _this.connectHeaders,\n        disconnectHeaders: _this._disconnectHeaders,\n        heartbeatIncoming: _this.heartbeatIncoming,\n        heartbeatOutgoing: _this.heartbeatOutgoing,\n        splitLargeFrames: _this.splitLargeFrames,\n        maxWebSocketChunkSize: _this.maxWebSocketChunkSize,\n        forceBinaryWSFrames: _this.forceBinaryWSFrames,\n        logRawCommunication: _this.logRawCommunication,\n        appendMissingNULLonIncoming: _this.appendMissingNULLonIncoming,\n        discardWebsocketOnCommFailure: _this.discardWebsocketOnCommFailure,\n        onConnect: frame => {\n          // Successfully connected, stop the connection watcher\n          if (_this._connectionWatcher) {\n            clearTimeout(_this._connectionWatcher);\n            _this._connectionWatcher = undefined;\n          }\n          if (!_this.active) {\n            _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n            _this._disposeStompHandler();\n            return;\n          }\n          _this.onConnect(frame);\n        },\n        onDisconnect: frame => {\n          _this.onDisconnect(frame);\n        },\n        onStompError: frame => {\n          _this.onStompError(frame);\n        },\n        onWebSocketClose: evt => {\n          _this._stompHandler = undefined; // a new one will be created in case of a reconnect\n          if (_this.state === ActivationState.DEACTIVATING) {\n            // Mark deactivation complete\n            _this._changeState(ActivationState.INACTIVE);\n          }\n          // The callback is called before attempting to reconnect, this would allow the client\n          // to be `deactivated` in the callback.\n          _this.onWebSocketClose(evt);\n          if (_this.active) {\n            _this._schedule_reconnect();\n          }\n        },\n        onWebSocketError: evt => {\n          _this.onWebSocketError(evt);\n        },\n        onUnhandledMessage: message => {\n          _this.onUnhandledMessage(message);\n        },\n        onUnhandledReceipt: frame => {\n          _this.onUnhandledReceipt(frame);\n        },\n        onUnhandledFrame: frame => {\n          _this.onUnhandledFrame(frame);\n        }\n      });\n      _this._stompHandler.start();\n    })();\n  }\n  _createWebSocket() {\n    let webSocket;\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n  _schedule_reconnect() {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n  /**\r\n   * Disconnect if connected and stop auto reconnect loop.\r\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n   *\r\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n   *\r\n   * It is not an error to invoke this method more than once.\r\n   * Each of those would resolve on completion of deactivation.\r\n   *\r\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n   *\r\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n   * In some cases, browsers take a long time in the Websocket shutdown\r\n   * if the underlying connection had gone stale.\r\n   * Using this mode can speed up.\r\n   * When this mode is used, the actual Websocket may linger for a while\r\n   * and the broker may not realize that the connection is no longer in use.\r\n   *\r\n   * It is possible to invoke this method initially without the `force` option\r\n   * and subsequently, say after a wait, with the `force` option.\r\n   */\n  deactivate(options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const force = options.force || false;\n      const needToDispose = _this2.active;\n      let retPromise;\n      if (_this2.state === ActivationState.INACTIVE) {\n        _this2.debug(`Already INACTIVE, nothing more to do`);\n        return Promise.resolve();\n      }\n      _this2._changeState(ActivationState.DEACTIVATING);\n      // Clear if a reconnection was scheduled\n      if (_this2._reconnector) {\n        clearTimeout(_this2._reconnector);\n        _this2._reconnector = undefined;\n      }\n      if (_this2._stompHandler &&\n      // @ts-ignore - if there is a _stompHandler, there is the webSocket\n      _this2.webSocket.readyState !== StompSocketState.CLOSED) {\n        const origOnWebSocketClose = _this2._stompHandler.onWebSocketClose;\n        // we need to wait for the underlying websocket to close\n        retPromise = new Promise((resolve, reject) => {\n          // @ts-ignore - there is a _stompHandler\n          _this2._stompHandler.onWebSocketClose = evt => {\n            origOnWebSocketClose(evt);\n            resolve();\n          };\n        });\n      } else {\n        // indicate that auto reconnect loop should terminate\n        _this2._changeState(ActivationState.INACTIVE);\n        return Promise.resolve();\n      }\n      if (force) {\n        _this2._stompHandler?.discardWebsocket();\n      } else if (needToDispose) {\n        _this2._disposeStompHandler();\n      }\n      return retPromise;\n    })();\n  }\n  /**\r\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n   * After forcing disconnect, automatic reconnect will be attempted.\r\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n   */\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n  /**\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations.\r\n   *\r\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n   *\r\n   * `body` must be String.\r\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n   *\r\n   * To send a binary message body, use `binaryBody` parameter. It should be a\r\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n   * Sometimes brokers may not support binary frames out of the box.\r\n   * Please check your broker documentation.\r\n   *\r\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n   * For binary messages, `content-length` header is always added.\r\n   *\r\n   * Caution: The broker will, most likely, report an error and disconnect\r\n   * if the message body has NULL octet(s) and `content-length` header is missing.\r\n   *\r\n   * ```javascript\r\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Only destination is mandatory parameter\r\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Skip content-length header in the frame to the broker\r\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n   *\r\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n   *        // setting content-type header is not mandatory, however a good practice\r\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n   *                         headers: {'content-type': 'application/octet-stream'}});\r\n   * ```\r\n   */\n  publish(params) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.publish(params);\n  }\n  _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n  /**\r\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n   * The value (say receipt-id) for this header needs to be unique for each use.\r\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n   *\r\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n   * The operation needs to be matched based on the value of the receipt-id.\r\n   *\r\n   * This method allows watching for a receipt and invoking the callback\r\n   *  when the corresponding receipt has been received.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Subscribing with acknowledgement\r\n   *        let receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *\r\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n   *\r\n   *\r\n   *        // Publishing with acknowledgement\r\n   *        receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n   * ```\r\n   */\n  watchForReceipt(receiptId, callback) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\r\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n   * received message with the {@link IMessage} as argument.\r\n   *\r\n   * Note: The library will generate a unique ID if there is none provided in the headers.\r\n   *       To use your own ID, pass it using the `headers` argument.\r\n   *\r\n   * ```javascript\r\n   *        callback = function(message) {\r\n   *        // called when the client receives a STOMP message from the server\r\n   *          if (message.body) {\r\n   *            alert(\"got message with body \" + message.body)\r\n   *          } else {\r\n   *            alert(\"got empty message\");\r\n   *          }\r\n   *        });\r\n   *\r\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n   *\r\n   *        // Explicit subscription id\r\n   *        var mySubId = 'my-subscription-id-001';\r\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n   * ```\r\n   */\n  subscribe(destination, callback, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\r\n   * It is preferable to unsubscribe from a subscription by calling\r\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n   *\r\n   * ```javascript\r\n   *        var subscription = client.subscribe(destination, onmessage);\r\n   *        // ...\r\n   *        subscription.unsubscribe();\r\n   * ```\r\n   *\r\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n   */\n  unsubscribe(id, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\r\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n   * and [abort]{@link ITransaction#abort}.\r\n   *\r\n   * `transactionId` is optional, if not passed the library will generate it internally.\r\n   */\n  begin(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.commit();\r\n   * ```\r\n   */\n  commit(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.commit(transactionId);\n  }\n  /**\r\n   * Abort a transaction.\r\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.abort();\r\n   * ```\r\n   */\n  abort(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.abort(transactionId);\n  }\n  /**\r\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // acknowledge it\r\n   *          message.ack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n  ack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\r\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // an error occurs, nack it\r\n   *          message.nack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n  nack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}\n//# sourceMappingURL=client.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}