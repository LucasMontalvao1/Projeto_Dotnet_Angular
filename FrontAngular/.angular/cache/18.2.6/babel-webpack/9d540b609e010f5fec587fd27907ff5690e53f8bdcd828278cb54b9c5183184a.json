{"ast":null,"code":"/**\r\n * @license Angular v18.2.6\r\n * (c) 2010-2024 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, RendererFactory2, NgZone, ANIMATION_MODULE_TYPE, NgModule, ɵperformanceMarkFeature } from '@angular/core';\nexport { ANIMATION_MODULE_TYPE } from '@angular/core';\nimport { ɵDomRendererFactory2, BrowserModule } from '@angular/platform-browser';\nimport * as i1 from '@angular/animations/browser';\nimport { ɵAnimationEngine, ɵWebAnimationsStyleNormalizer, ɵAnimationRendererFactory, ɵAnimationStyleNormalizer, AnimationDriver, ɵWebAnimationsDriver, NoopAnimationDriver } from '@angular/animations/browser';\nimport { DOCUMENT } from '@angular/common';\nlet InjectableAnimationEngine = /*#__PURE__*/(() => {\n  class InjectableAnimationEngine extends ɵAnimationEngine {\n    // The `ApplicationRef` is injected here explicitly to force the dependency ordering.\n    // Since the `ApplicationRef` should be created earlier before the `AnimationEngine`, they\n    // both have `ngOnDestroy` hooks and `flush()` must be called after all views are destroyed.\n    constructor(doc, driver, normalizer) {\n      super(doc, driver, normalizer);\n    }\n    ngOnDestroy() {\n      this.flush();\n    }\n    static {\n      this.ɵfac = function InjectableAnimationEngine_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || InjectableAnimationEngine)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.AnimationDriver), i0.ɵɵinject(i1.ɵAnimationStyleNormalizer));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: InjectableAnimationEngine,\n        factory: InjectableAnimationEngine.ɵfac\n      });\n    }\n  }\n  return InjectableAnimationEngine;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction instantiateDefaultStyleNormalizer() {\n  return new ɵWebAnimationsStyleNormalizer();\n}\nfunction instantiateRendererFactory(renderer, engine, zone) {\n  return new ɵAnimationRendererFactory(renderer, engine, zone);\n}\nconst SHARED_ANIMATION_PROVIDERS = [{\n  provide: ɵAnimationStyleNormalizer,\n  useFactory: instantiateDefaultStyleNormalizer\n}, {\n  provide: ɵAnimationEngine,\n  useClass: InjectableAnimationEngine\n}, {\n  provide: RendererFactory2,\n  useFactory: instantiateRendererFactory,\n  deps: [ɵDomRendererFactory2, ɵAnimationEngine, NgZone]\n}];\n/**\r\n * Separate providers from the actual module so that we can do a local modification in Google3 to\r\n * include them in the BrowserModule.\r\n */\nconst BROWSER_ANIMATIONS_PROVIDERS = [{\n  provide: AnimationDriver,\n  useFactory: () => new ɵWebAnimationsDriver()\n}, {\n  provide: ANIMATION_MODULE_TYPE,\n  useValue: 'BrowserAnimations'\n}, ...SHARED_ANIMATION_PROVIDERS];\n/**\r\n * Separate providers from the actual module so that we can do a local modification in Google3 to\r\n * include them in the BrowserTestingModule.\r\n */\nconst BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{\n  provide: AnimationDriver,\n  useClass: NoopAnimationDriver\n}, {\n  provide: ANIMATION_MODULE_TYPE,\n  useValue: 'NoopAnimations'\n}, ...SHARED_ANIMATION_PROVIDERS];\n\n/**\r\n * Exports `BrowserModule` with additional dependency-injection providers\r\n * for use with animations. See [Animations](guide/animations).\r\n * @publicApi\r\n */\nlet BrowserAnimationsModule = /*#__PURE__*/(() => {\n  class BrowserAnimationsModule {\n    /**\r\n     * Configures the module based on the specified object.\r\n     *\r\n     * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.\r\n     * @see {@link BrowserAnimationsModuleConfig}\r\n     *\r\n     * @usageNotes\r\n     * When registering the `BrowserAnimationsModule`, you can use the `withConfig`\r\n     * function as follows:\r\n     * ```\r\n     * @NgModule({\r\n     *   imports: [BrowserAnimationsModule.withConfig(config)]\r\n     * })\r\n     * class MyNgModule {}\r\n     * ```\r\n     */\n    static withConfig(config) {\n      return {\n        ngModule: BrowserAnimationsModule,\n        providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS\n      };\n    }\n    static {\n      this.ɵfac = function BrowserAnimationsModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || BrowserAnimationsModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: BrowserAnimationsModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: BROWSER_ANIMATIONS_PROVIDERS,\n        imports: [BrowserModule]\n      });\n    }\n  }\n  return BrowserAnimationsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Returns the set of dependency-injection providers\r\n * to enable animations in an application. See [animations guide](guide/animations)\r\n * to learn more about animations in Angular.\r\n *\r\n * @usageNotes\r\n *\r\n * The function is useful when you want to enable animations in an application\r\n * bootstrapped using the `bootstrapApplication` function. In this scenario there\r\n * is no need to import the `BrowserAnimationsModule` NgModule at all, just add\r\n * providers returned by this function to the `providers` list as show below.\r\n *\r\n * ```typescript\r\n * bootstrapApplication(RootComponent, {\r\n *   providers: [\r\n *     provideAnimations()\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction provideAnimations() {\n  ɵperformanceMarkFeature('NgEagerAnimations');\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideAnimations` call results in app code.\n  return [...BROWSER_ANIMATIONS_PROVIDERS];\n}\n/**\r\n * A null player that must be imported to allow disabling of animations.\r\n * @publicApi\r\n */\nlet NoopAnimationsModule = /*#__PURE__*/(() => {\n  class NoopAnimationsModule {\n    static {\n      this.ɵfac = function NoopAnimationsModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NoopAnimationsModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: NoopAnimationsModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n        imports: [BrowserModule]\n      });\n    }\n  }\n  return NoopAnimationsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Returns the set of dependency-injection providers\r\n * to disable animations in an application. See [animations guide](guide/animations)\r\n * to learn more about animations in Angular.\r\n *\r\n * @usageNotes\r\n *\r\n * The function is useful when you want to bootstrap an application using\r\n * the `bootstrapApplication` function, but you need to disable animations\r\n * (for example, when running tests).\r\n *\r\n * ```typescript\r\n * bootstrapApplication(RootComponent, {\r\n *   providers: [\r\n *     provideNoopAnimations()\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\nfunction provideNoopAnimations() {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideNoopAnimations` call results in app code.\n  return [...BROWSER_NOOP_ANIMATIONS_PROVIDERS];\n}\n\n/**\r\n * @module\r\n * @description\r\n * Entry point for all animation APIs of the animation browser package.\r\n */\n\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BrowserAnimationsModule, NoopAnimationsModule, provideAnimations, provideNoopAnimations, InjectableAnimationEngine as ɵInjectableAnimationEngine };\n//# sourceMappingURL=animations.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}