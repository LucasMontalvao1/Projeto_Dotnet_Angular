{"ast":null,"code":"import { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, authService, router, snackBar) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.isLoading = false;\n      this.errorMessage = null;\n      this.hidePassword = true;\n      this.year = new Date().getFullYear();\n      this.loginForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(1)]],\n        password: ['', [Validators.required, Validators.minLength(1)]],\n        rememberMe: [false]\n      });\n    }\n    ngOnInit() {}\n    onSubmit() {\n      if (this.loginForm.valid) {\n        this.isLoading = true;\n        this.errorMessage = null;\n        const {\n          username,\n          password,\n          rememberMe\n        } = this.loginForm.value;\n        this.authService.login({\n          username,\n          password\n        }).subscribe({\n          next: user => {\n            if (user && user.token) {\n              if (rememberMe) {\n                localStorage.setItem('rememberMe', 'true');\n              }\n              this.authService.storeToken(user.token);\n              this.router.navigate(['/home']);\n              this.showSuccessMessage('Bem-vindo de volta!');\n            } else {\n              this.handleError('Falha na autenticação');\n            }\n          },\n          error: error => {\n            this.handleError(error);\n          }\n        });\n      } else {\n        this.markFormGroupTouched(this.loginForm);\n      }\n    }\n    showSuccessMessage(message) {\n      this.snackBar.open(message, 'Fechar', {\n        duration: 3000,\n        panelClass: ['success-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'top'\n      });\n    }\n    handleError(error) {\n      const errorMessage = error?.error?.message || 'Ocorreu um erro ao fazer login';\n      this.errorMessage = errorMessage;\n      this.snackBar.open(errorMessage, 'Fechar', {\n        duration: 5000,\n        panelClass: ['error-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'top'\n      });\n      this.isLoading = false;\n    }\n    markFormGroupTouched(formGroup) {\n      Object.values(formGroup.controls).forEach(control => {\n        control.markAsTouched();\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      });\n    }\n    getErrorMessage(controlName) {\n      const control = this.loginForm.get(controlName);\n      if (control?.hasError('required')) {\n        return `${controlName === 'username' ? 'Usuário' : 'Senha'} é obrigatório`;\n      }\n      if (control?.hasError('minlength')) {\n        return `${controlName === 'username' ? 'Usuário' : 'Senha'} deve ter no mínimo ${control.errors?.['minlength'].requiredLength} caracteres`;\n      }\n      return '';\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 21,\n        vars: 2,\n        consts: [[1, \"login-container\"], [1, \"login-card\"], [1, \"login-header\"], [1, \"subtitle\"], [1, \"login-form\"], [3, \"ngSubmit\", \"formGroup\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"formControlName\", \"password\", 3, \"type\"], [\"formControlName\", \"rememberMe\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"div\", 2)(3, \"h1\");\n            i0.ɵɵtext(4, \"Bem-vindo\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\", 3);\n            i0.ɵɵtext(6, \"Entre com suas credenciais para continuar\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(7, \"div\", 4)(8, \"form\", 5);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(9, \"mat-form-field\", 6)(10, \"mat-label\");\n            i0.ɵɵtext(11, \"Usu\\u00E1rio\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(12, \"input\", 7);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"mat-form-field\", 6)(14, \"mat-label\");\n            i0.ɵɵtext(15, \"Senha\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(16, \"input\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"mat-checkbox\", 9);\n            i0.ɵɵtext(18, \"Lembrar-me\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"button\", 10);\n            i0.ɵɵtext(20, \" Entrar \");\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"type\", ctx.hidePassword ? \"password\" : \"text\");\n          }\n        },\n        dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatCard, i6.MatFormField, i6.MatLabel, i7.MatInput, i8.MatButton],\n        styles: [\".login-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;min-height:100vh;padding:20px}.login-card[_ngcontent-%COMP%]{width:100%;max-width:400px}.login-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:1rem}mat-form-field[_ngcontent-%COMP%]{width:100%}\"]\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}